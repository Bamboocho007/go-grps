// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: weather/v1/weather.proto

package weatherpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeatherStoreServiceClient is the client API for WeatherStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherStoreServiceClient interface {
	GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error)
	PutWeather(ctx context.Context, in *PutWeatherRequest, opts ...grpc.CallOption) (*PutWeatherResponse, error)
	DeleteWeather(ctx context.Context, in *DeleteWeatherRequest, opts ...grpc.CallOption) (*DeleteWeatherResponse, error)
}

type weatherStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherStoreServiceClient(cc grpc.ClientConnInterface) WeatherStoreServiceClient {
	return &weatherStoreServiceClient{cc}
}

func (c *weatherStoreServiceClient) GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error) {
	out := new(GetWeatherResponse)
	err := c.cc.Invoke(ctx, "/weather.v1.WeatherStoreService/GetWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherStoreServiceClient) PutWeather(ctx context.Context, in *PutWeatherRequest, opts ...grpc.CallOption) (*PutWeatherResponse, error) {
	out := new(PutWeatherResponse)
	err := c.cc.Invoke(ctx, "/weather.v1.WeatherStoreService/PutWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherStoreServiceClient) DeleteWeather(ctx context.Context, in *DeleteWeatherRequest, opts ...grpc.CallOption) (*DeleteWeatherResponse, error) {
	out := new(DeleteWeatherResponse)
	err := c.cc.Invoke(ctx, "/weather.v1.WeatherStoreService/DeleteWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherStoreServiceServer is the server API for WeatherStoreService service.
// All implementations should embed UnimplementedWeatherStoreServiceServer
// for forward compatibility
type WeatherStoreServiceServer interface {
	GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error)
	PutWeather(context.Context, *PutWeatherRequest) (*PutWeatherResponse, error)
	DeleteWeather(context.Context, *DeleteWeatherRequest) (*DeleteWeatherResponse, error)
}

// UnimplementedWeatherStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWeatherStoreServiceServer struct {
}

func (UnimplementedWeatherStoreServiceServer) GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (UnimplementedWeatherStoreServiceServer) PutWeather(context.Context, *PutWeatherRequest) (*PutWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutWeather not implemented")
}
func (UnimplementedWeatherStoreServiceServer) DeleteWeather(context.Context, *DeleteWeatherRequest) (*DeleteWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWeather not implemented")
}

// UnsafeWeatherStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherStoreServiceServer will
// result in compilation errors.
type UnsafeWeatherStoreServiceServer interface {
	mustEmbedUnimplementedWeatherStoreServiceServer()
}

func RegisterWeatherStoreServiceServer(s grpc.ServiceRegistrar, srv WeatherStoreServiceServer) {
	s.RegisterService(&WeatherStoreService_ServiceDesc, srv)
}

func _WeatherStoreService_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherStoreServiceServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.v1.WeatherStoreService/GetWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherStoreServiceServer).GetWeather(ctx, req.(*GetWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherStoreService_PutWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherStoreServiceServer).PutWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.v1.WeatherStoreService/PutWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherStoreServiceServer).PutWeather(ctx, req.(*PutWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherStoreService_DeleteWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherStoreServiceServer).DeleteWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.v1.WeatherStoreService/DeleteWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherStoreServiceServer).DeleteWeather(ctx, req.(*DeleteWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherStoreService_ServiceDesc is the grpc.ServiceDesc for WeatherStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weather.v1.WeatherStoreService",
	HandlerType: (*WeatherStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _WeatherStoreService_GetWeather_Handler,
		},
		{
			MethodName: "PutWeather",
			Handler:    _WeatherStoreService_PutWeather_Handler,
		},
		{
			MethodName: "DeleteWeather",
			Handler:    _WeatherStoreService_DeleteWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather/v1/weather.proto",
}
