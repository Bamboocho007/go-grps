// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: beats/v1/beats.proto

package beatspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeatsStreamingServiceClient is the client API for BeatsStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeatsStreamingServiceClient interface {
	BeatsStream(ctx context.Context, in *BeatsStreamRequest, opts ...grpc.CallOption) (BeatsStreamingService_BeatsStreamClient, error)
}

type beatsStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeatsStreamingServiceClient(cc grpc.ClientConnInterface) BeatsStreamingServiceClient {
	return &beatsStreamingServiceClient{cc}
}

func (c *beatsStreamingServiceClient) BeatsStream(ctx context.Context, in *BeatsStreamRequest, opts ...grpc.CallOption) (BeatsStreamingService_BeatsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BeatsStreamingService_ServiceDesc.Streams[0], "/beats.v1.BeatsStreamingService/BeatsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &beatsStreamingServiceBeatsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BeatsStreamingService_BeatsStreamClient interface {
	Recv() (*BeatsStreamResponse, error)
	grpc.ClientStream
}

type beatsStreamingServiceBeatsStreamClient struct {
	grpc.ClientStream
}

func (x *beatsStreamingServiceBeatsStreamClient) Recv() (*BeatsStreamResponse, error) {
	m := new(BeatsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeatsStreamingServiceServer is the server API for BeatsStreamingService service.
// All implementations should embed UnimplementedBeatsStreamingServiceServer
// for forward compatibility
type BeatsStreamingServiceServer interface {
	BeatsStream(*BeatsStreamRequest, BeatsStreamingService_BeatsStreamServer) error
}

// UnimplementedBeatsStreamingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBeatsStreamingServiceServer struct {
}

func (UnimplementedBeatsStreamingServiceServer) BeatsStream(*BeatsStreamRequest, BeatsStreamingService_BeatsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BeatsStream not implemented")
}

// UnsafeBeatsStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeatsStreamingServiceServer will
// result in compilation errors.
type UnsafeBeatsStreamingServiceServer interface {
	mustEmbedUnimplementedBeatsStreamingServiceServer()
}

func RegisterBeatsStreamingServiceServer(s grpc.ServiceRegistrar, srv BeatsStreamingServiceServer) {
	s.RegisterService(&BeatsStreamingService_ServiceDesc, srv)
}

func _BeatsStreamingService_BeatsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BeatsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeatsStreamingServiceServer).BeatsStream(m, &beatsStreamingServiceBeatsStreamServer{stream})
}

type BeatsStreamingService_BeatsStreamServer interface {
	Send(*BeatsStreamResponse) error
	grpc.ServerStream
}

type beatsStreamingServiceBeatsStreamServer struct {
	grpc.ServerStream
}

func (x *beatsStreamingServiceBeatsStreamServer) Send(m *BeatsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BeatsStreamingService_ServiceDesc is the grpc.ServiceDesc for BeatsStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeatsStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beats.v1.BeatsStreamingService",
	HandlerType: (*BeatsStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BeatsStream",
			Handler:       _BeatsStreamingService_BeatsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "beats/v1/beats.proto",
}
